## Live demo

1. Design picture (from Amazon Quick Start)
   Choices which has been made with reasons.

2. Setup process
   2.1 - Launch CF, wait for completion (Calico must be turned on for network policies)

   2.2 - nginx ingress setup
    git clone https://github.com/nginxinc/kubernetes-ingress/
    cd kubernetes-ingress/deployments/helm-chart
    git checkout v2.0.3
    helm install nginx-release1 .
    k get svc


   2.2 - mongodb (helm)
     helm repo add bitnami https://charts.bitnami.com/bitnami
     cd 
     git clone https://github.com/gdm/k8s-assessment.git
     cd k8s-assessment/charts # note: link te default values for mongo chart https://artifacthub.io/packages/helm/bitnami/mongodb
     helm install mongo-release-1 bitnami/mongodb -f mongo-values.yaml
     export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace default mongo-release-1-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)

     create new db using instruction in chart , commands to create use mynewdb; db.user.insert({name: "Ada Lovelace", age: 205})
     

   2.3 - elk (helm)
     helm install my-release bitnami/elasticsearch -f values.yaml
   
   2.4 - application (helm) + ingress
     todo: automate using helm part below
     cd nodejs-app
     k apply -f filebeat-configmap.yml
     export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace default mongo-release-1-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)
     export MONGOURL=$(echo -n "mongodb://root:${MONGODB_ROOT_PASSWORD}@mongo-release-1-mongodb.default.svc.cluster.local/" | base64 -w0)
     sed -i "s|MONGODB_URL: change_me|MONGODB_URL: $MONGOURL|" secret.yml
     k apply -f hostname-deployments.yml
     k apply -f secret.yml
     k apply -f deployment.yml
     k apply -f service.yml
     # endit and apply ingress, test application

   2.5 Setup new api
     (cat deployment.yml ; echo "---"; cat service.yml ) | sed 's/nodejs-app/new-api-app/g; s/nodejs-svc/newapi-svc/g'  > newapi.yml
     k apply -f newapi.yml
     # edit and apply new ingress (add /newapi endpoint)

   2.6 Apply network rules  (together with testing)
     k apply -f network-policy-deny-all-ingress-by-default.yml
     # make sure that endpoints aren't functional
     k delete networkpolicy default-deny-ingress
     k apply -f network-policy-mongodb.yml # allow only one application

   2.7 Setup cron job
     k apply -f network-policy-new-api.yml


   2.8 Workaround for 'bug'
     note1: better do it on Dockerfile level
     note2: use initContainer  (https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-initialization/)
 initContainers:
  - name: install
    image: busybox
    env:
			- name: NODE_GAMBI
			  valueFrom:
          secretKeyRef:
            name: appsecrets
            key: node-gambi
    command:
    - bash
    - "-c"
    - 'echo "${NODE_GAMBI} failure is." > /opt/node_reporting_bug/gambiarra.md; chmod 0666 /opt/node_reporting_bug/gambiarra.md'
    volumeMounts:
    - name: bugdir
      mountPath: "/opt/node_reporting_bug/"
