AWSTemplateFormatVersion: '2010-09-09'
Description: Network infra for experiments with IPV6
Parameters:
  ALLOWSSHACCESS:
    Description: An IP address range that is allowed to access to the server via ssh
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AZ1:
    Description: Availability zone1
    Type: String
    Default: eu-central-1a
  AZ2:
    Description: Availability zone2
    Type: String
    Default: eu-central-1b
  AZ3:
    Description: Availability zone3
    Type: String
    Default: eu-central-1c
  VPCRANGE:
    Description: Internal network for VPC
    Type: String
    Default: 10.11.0.0/16
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCRANGE
      EnableDnsSupport: True

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true
    
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  #  --ipv6-native isn't supported as of 2022-02-05 in CloudFormation
  # see more https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example-ipv6-v2.html
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      Ipv6CidrBlock: !Select [ 0, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 3, 64 ]]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      Ipv6CidrBlock: !Select [ 1, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 3, 64 ]]

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ3
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      Ipv6CidrBlock: !Select [ 2, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 3, 64 ]]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  PublicRouteInternetAccessViaGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteInternetAccessViaGatewayIPV6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  InboundNetworkAclEntryALLOWVPNENDPOINT22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock:
        Ref: ALLOWSSHACCESS
      PortRange:
        From: '22'
        To: '22'

  InboundNetworkAclEntryALLOWVPNENDPOINT80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  InboundNetworkAclEntryALLOWVPNENDPOINT80IPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1154'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      PortRange:
        From: '80'
        To: '80'

  InboundNetworkAclEntryAllowHTTPSFromAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  InboundNetworkAclEntryAllowHTTPSFromAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1220'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      PortRange:
        From: '443'
        To: '443'

  OutboundNetworkAclEntryALLOWCustomAllOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  OutboundNetworkAclEntryALLOWCustomAllOutIPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1305'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      PortRange:
        From: '1024'
        To: '65535'

  OutboundNetworkAclEntryAllowHTTPToAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1400'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  OutboundNetworkAclEntryAllowHTTPToAllIPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1405'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      PortRange:
        From: '80'
        To: '80'

  OutboundNetworkAclEntryAllowHTTPSToAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1500'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  OutboundNetworkAclEntryAllowHTTPSToAllIPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1505'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      PortRange:
        From: '443'
        To: '443'

  OutboundNetworkAclEntryAllowSSHToAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1670'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'

  OutboundNetworkAclEntryAllowFTPToAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1660'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '20'
        To: '21'

  OutboundNetworkAclEntryDNS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1700'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '53'
        To: '53'

  InboundNetworkAclEntryDNS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1750'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '53'
        To: '53'

  OutboundNetworkAclEntryAllowICMP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '1770'
      Protocol: '1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: 8

  InboundNetworkAclEntryAllowICMP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '1775'
      Protocol: '1'
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: 8

  OutboundNetworkAclEntryAllowICMPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '1780'
      Protocol: 58
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      Icmp:
        Code: -1
        Type: 128

  InboundNetworkAclEntryAllowICMPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '1785'
      Protocol: 58
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'
      Icmp:
        Code: -1
        Type: 128

  OutboundNetworkAclEntryNTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1800'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '123'
        To: '123'

  InboundNetworkAclEntryUDPAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '1901'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  InboundNetworkAclEntryTCPAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '2001'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  InboundNetworkAclEntryTCPAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '2005'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      PortRange:
        From: '1024'
        To: '65535'

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: PublicNetworkAcl

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      GroupDescription: Enable SSH ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref ALLOWSSHACCESS
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        CidrIpv6: "::/0"
        FromPort: 80
        ToPort: 80
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIpv6: '::/0'
      - IpProtocol: icmp
        CidrIp: 0.0.0.0/0
        FromPort: '-1'
        ToPort: '-1'
      - IpProtocol: icmpv6
        CidrIpv6: "::/0"
        FromPort: '-1'
        ToPort: '-1'
      SecurityGroupEgress: []

  # For SSM https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-profile.html
  InstanceRoleAccessIPV6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
       - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:GetObject"
                Resource: 
                   - "arn:aws:s3:::aws-ssm-eu-central-1/*"
                   - "arn:aws:s3:::amazon-ssm-eu-central-1/*"
                   - "arn:aws:s3:::amazon-ssm-packages-eu-central-1/*"
                   - "arn:aws:s3:::eu-central-1-birdwatcher-prod/*"
                   - "arn:aws:s3:::aws-ssm-distributor-file-eu-central-1/*"
                   - "arn:aws:s3:::aws-ssm-document-attachments-eu-central-1/*"
                   - "arn:aws:s3:::patch-baseline-snapshot-eu-central-1/*"

  InstanceProfileIPV6:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRoleAccessIPV6
      InstanceProfileName: IAMInstanceProfileIPV6

Outputs:
  VpcId:
    Value: !Ref VPC
  VpcIdCIDRIPv6:
    Value: !Join [ "#", !GetAtt VPC.Ipv6CidrBlocks ]
  SubnetId1:
    Value: !Ref PublicSubnet1
  SubnetId2:
    Value: !Ref PublicSubnet2
  SubnetId3:
    Value: !Ref PublicSubnet3
  InstanceSecurityGroup:
    Value: !Ref InstanceSecurityGroup
  InstanceProfileIPV6:
    Value: !GetAtt InstanceProfileIPV6.Arn
